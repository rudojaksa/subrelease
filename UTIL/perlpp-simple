#!/usr/bin/perl
#   simple perl preprocessor - just incorporates include files
# * looks into all subdirectories to find included file
#   - in the depth order
#   - relative to CWD from where perlpp is run, not where file is located
# * avoids double include
# * -e DIR to exclude directories from search
# * -d for debug messaging
#   syntax:
#   #include "abc.pl" # comments, any name if quoted
#   # include abc.pl comments, only .pl suffix if not quoted, # not needed
#   # include abc.pl def.pl # multiple files in one include allowed
# TODO: actually, double include is useful when including inside blocks!

for(@ARGV) { $DEBUG=1 and $_="" if $_ eq "-d" }
our $CR_="\033[31m"; # color red
our $CG_="\033[32m"; # color green
our $CK_="\033[90m"; # color black
our $CD_="\033[0m";  # color default
sub pr { print  STDERR @_ }
sub pf { printf STDERR @_ }

# --------------------------------------------------------------- EXCLUDED DIRS
our @EXCL; # list of dirs to be excluded

for(my $i=0;$i<$#ARGV;$i++) {
  next if $ARGV[$i] ne "-e" or not -d $ARGV[$i+1];
  push @EXCL,$ARGV[$i+1];
  $ARGV[$i] = $ARGV[$i+1] = "" }

for(@EXCL) { $_="./$_" if not /^\.\// } # prepend "./" if needed

# pr "excl: $_\n" for @EXCL;
# ------------------------------------------------ LIST OF DIRS WITH PERL FILES
our @DIRS; # recursive list of local dirs
our %NF;   # number of files in each dir
our %FF;   # list of perl files in each dir

# inar \@a,$s; checks whether the string $s is in an array @a
sub inar { my ($a,$s)=@_; for(@{$a}) { return 1 if $_ eq $s } return 0 }

# pldirs "."; looks for all dirs with .pl files in ".", fills-up @DIRS and %NF
sub pldirs {
  my $dir = $_[0];
  my @all; opendir(DIR,$dir); @all=readdir(DIR); closedir(DIR);
  my @ff; for(@all) { push @ff,$_ if $_=~/\.pl$/ }	# save .pl files names
  if(@ff) { push @DIRS,$dir; $NF{$dir}=@ff; $FF{$dir}=\@ff } # save nonempty
  for(@all) {
    next if /^\./;					# skip hidden dirs
    my $path = "$dir/$_";
    next if inar \@EXCL,$path;				# skip excluded dirs
    pldirs($path) if -d $path; }}

# do look
pldirs ".";

# pf "%4d: %s\n",$NF{$_},$_ for @DIRS;
# for my $d (@DIRS) { pf "%22s:",$d; pr " $_" for @{$FF{$d}}; pr "\n" }
# ------------------------------------------------------------ SORT SEARCH DIRS

# 1st compare by number of slashes - to look in current directory first
# 2nd compare by number of .pl files in dir - just speculative speedup
sub compare {
  my $ca = $a=~tr/\///;	# count of / in $a
  my $cb = $b=~tr/\///; # in $b
  if   ($ca<$cb) { return -1 }
  elsif($ca>$cb) { return 1 }
  else {
    if   ($NF{$a}>$NF{$b}) { return -1 }
    elsif($NF{$a}<$NF{$b}) { return 1 }
  else { return 0 }}}

# resort DIRS
@DIRS=(); push @DIRS,$_ for sort compare keys %NF;

# pf "%4d: %s\n",$NF{$_},$_ for @DIRS;
# ------------------------------------------------------------ PROCESS INCLUDES
our @INCLUDED;	# list of already included files (to disable double include)

# line by line add a file to the output, parse # macros
sub addfile {
  my  $file=$_[0];
  local $in=$_[1];

  # look for file recursively
  my ($path,$ok);				# full path and whether found
  for my $dir (@DIRS) { $path = "$dir/$file";
    $ok=2 and last if inar \@INCLUDED,$path;	# already included
    $ok=1 and last if inar $FF{$dir},$file }	# found => proceed

  # debug
  sub prd { pr "$in$_[0]$_[1]$CD_\n" }
  if($DEBUG) {
    if   ($ok==1) { (my $p=$path)=~s/^\.\///; prd $CG_,$p } # OK
    elsif($ok==2) { prd $CK_,$file }		# double include
    else { prd $CR_,$file }}			# not found

  return if $ok!=1;				# file not found
  push @INCLUDED,$path;				# register file

  # parse the file
  my $IN1 = qr/^\h*\"([^\"]+)\"\h*/;		# quoted include
  my $IN2 = qr/^\h*([a-zA-Z0-9\._-]+\.pl)\h*/;	# .pl unquoted include
  for(split /\n/,`cat $path`) {

    # include lines	
    if(/^\h*\#\h*include\h+(.*?)$/) {
      my $s=$1; my $ok;
      while($s=~s/$IN1// or $s=~s/$IN2//) { addfile($1,"$in  "); $ok=1 }
      next if $ok }

    # regular lines
    print "$_\n" }}

# add each requested file (argument) to the output
for(@ARGV) {
  next if $_ eq "";
  addfile $_ }

# ----------------------------------------------------- R.Jaksa 2000,2023 GPLv3
