#!/usr/bin/perl

our $BUILT = "2023-08-13";
our $PACKAGE = "subrelease";
our $VERSION = "0.11";
our $PROJECT = "makeutils";
our $AUTHOR = "R.Jaksa 2001,2021,2023 GPLv3";
our $SUBVERSION = "bt";

# remove NL
our sub nonl { chomp $_[0]; return $_[0]; }

# inar newgen, returns index+1 instead of simple 0/1
# inar(\@a,$s) - check whether the string is in the array, return its idx+1 or zero (1st match)
our sub inar {
  my $a=$_[0];	# array ref
  my $s=$_[1];	# string
  for(my $i=0;$i<=$#{$a};$i++) { return $i+1 if $$a[$i] eq $s; }
  return 0; }

# clar(\@a,$s) - clear the string in the array (1st match), return its idx+1 or zero
our sub clar {
  my $a=$_[0];	# array ref
  my $s=$_[1];	# string
  for(my $i=0;$i<=$#{$a};$i++) {
    if($$a[$i] eq $s) {
      $$a[$i] = "";
      return $i+1; }}
  return 0; }

sub writefile { open(O,">$_[0]") or die "$_[0]: $!"; print O $_[1]; close(O); }

# ----------------------------------------------------------------------------------------------- CMD

# call a command (its output in red), 2nd arg is optional echo color
sub cmd {
  my $c1=$CM_; $c1=$_[1] if defined $_[1]; # command call color
  my $c2=$CR_; $c2=$_[2] if defined $_[2]; # stdout color
  print "$c1$_[0]$CD_\n$c2"; system $_[0]; print $CD_ }

# call with output to /dev/null, stderr still red
sub cmdnull {
  print "$CK_$_[0]$CD_\n$CR_"; system "$_[0] > /dev/null"; print $CD_ }

# -------------------------------------------------------------------------------------------- COLORS

our $CR_="\033[31m"; # color red
our $CG_="\033[32m"; # color green
our $CM_="\033[35m"; # color magenta
our $CC_="\033[36m"; # color cyan
our $CW_="\033[37m"; # color white
our $CK_="\033[90m"; # color black
our $CD_="\033[0m";  # color default

# return length of string without escape sequences
our sub esclen {
  my $s = shift;
  $s =~ s/\033\[[0-9]+m//g;
  return length $s; }

# ----------------------------------------------------------------------------------------- PRINTHELP

# print $HELP and exit
sub printhelp {
  $HELP =~ s/(\n\#.*)*\n/\n/g; # skip commented-out lines
  my $colors = "CWRDKGMB";
  my $L="\#\#\>"; my $R="\<\#\#"; my $id=0; # private left/right brace
  sub SBS { return "$L$_[0]$R"; } # return complete private subst. identifier
  my $RE1 = qr/(\((([^()]|(?-3))*)\))/x; # () group, $1=withparens, $2=without
  $STR{$id++}=$4 while $HELP=~s/([^A-Z0-9])(C[$colors])$RE1/$1.SBS("c$2$id")/e;
  $STR{$id++}=$2 while $HELP=~s/(\n[ ]*)(-[a-zA-Z0-9\/]+(\[?[ =][A-Z]{2,}(x[A-Z]{2,})?\]?)?)([ \t])/$1.SBS("op$id").$5/e; # options lists
  $STR{$id++}="$1$2" while $HELP=~s/\[([+-])?([A-Z]+)\]/SBS "br$id"/e; # bracketed uppercase words
  $STR{$id++}=$2 while $HELP=~s/(\n|[ \t])(([A-Z_\/-]+[ ]?){4,})/$1.SBS("pl$id")/e; # plain uppercase words
  $HELP =~ s/${L}pl([0-9]+)$R/$CC_$STR{$1}$CD_/g;
  $HELP =~ s/${L}op([0-9]+)$R/$CC_$STR{$1}$CD_/g;
  $HELP =~ s/${L}br([0-9]+)$R/\[$CC_$STR{$1}$CD_\]/g;
  my %cc; $cc{$_}=${C.$_._} for split //,$colors;
  $HELP =~ s/${L}cC([$colors])([0-9]+)$R/$cc{$1}$STR{$2}$CD_/g;
  print $HELP; 
  exit }

# -------------------------------------------------------------------------------------------- CONFIG

# beautify $path,$pwd
sub beautify {
  my $qcwd = quotemeta $_[1];								# CWD
  my $p=$_[1]; $p=~s/\/*$//; $p=~s/[^\/]*$//; $p=~s/\/*$//; my $qp = quotemeta $p;	# parent
  my $pp=$p; $pp=~s/\/*$//; $pp=~s/[^\/]*$//; $pp=~s/\/*$//; my $qpp = quotemeta $pp;	# grandparent
  my $qh = quotemeta $ENV{HOME};							# home

  my $fn = $_[0];
  $fn =~ s/^$qcwd\/// if $qcwd;
  $fn =~ s/^$qp\//..\// if $qp;
  $fn =~ s/^$qpp\//..\/..\// if $qpp;
  $fn =~ s/^$qh\//~\// if $qh;
  return $fn }

# -------------------------------------------------------------------------------------------- CONFIG

# $file = parentcfg $init_dir,$filename; looks for config file in any parent directory
sub parentcfg { my ($dir,$fnm) = @_;
  while($dir ne "") {
    my $cf = "$dir/$fnm";
    return $cf if -f $cf;
    $dir =~ s/[^\/]*$//;
    $dir =~ s/\/$//; }
  return $cf if -f $cf }

# $file = homecfg $filename; just looks for the config file in home directory
sub homecfg { my $fnm = $_[0];
  my $cf = "$ENV{HOME}/$fnm";
  return $cf if -f $cf }

# getval $str,"keyword"; return the value for "keyword: value" line
sub cfgval { return $2 if $_[0]=~/(^|\n)\h*$_[1]\h*:\h+(.+?)\h*(\n|$)/ }

# R.Jaksa 2009,2023

our $HELP=<<EOF;

NAME
    getversion - get package version info for current directory

USAGE
    getversion [OPTIONS]

DESCRIPTION
    The getversion utility auto-detects the version information for
    the package rooted in current directory.  It does so by the
    examination of present configuration files, or directory names.

OPTIONS
      -h  This help.
    -pkg  Name of the package.
    -ver  Version number of the package.
    -sub  Subversion number of the package.
   -next  Next subversion number.
    -prj  Name of the project for this package.
    -pnm  Full package name including the version number.
    -cpy  Copyleft)CK(/)copyright announcement of the package.
    -del  The dot character between package name and version [.-].
    -src  File where the version info is defined.
    -cap  Package caption message.
    -lng  Language of the info file.
  CK(-t DIR)  CK(Target directory instead of ../tgz (for correct next).)
     CK(-bw)  CK(Black \& white.)
#CC(-pl/py/c)  Will generate config in perl/python/c (also CC(-make/com)). TODO
#   -full  Will generate full configs. TODO

C LANGUAGE
    Files CG(VERSION.h), then CG(CONFIG.h) or singlefile package:
    CW(#define PACKAGE \"package-name\")
    CW(#define VERSION \"1.13\" /* comment */)
    CW(#define PROJECT \"project-name\" // comment)
    CW(#define AUTHORS \"The.Author 1996\")

PERL
    Files CG(VERSION.pl), then CG(CONFIG.pl) or singlefile scripts, but also
    looks for the first perl file with CC(\$PACKAGE=...) line:
    CW(\$PACKAGE=\"package-name\";)
    CW(\$VERSION=\"1.13\";)
    CW(\$PROJECT=\"project-name\"; # comment)
    CW(\$COPYLEFT=\"(c) The.Author 1999, GPL\";)

SHELL OR PYTHON
    Shell singlefile scripts, or python files CG(VERSION.py), CG(CONFIG.py),
    or python singlefile scripts:
    CW(PACKAGE=\"package-name\")
    CW(VERSION=\"1.13\")
    CW(PROJECT=\"project-name\" # comment)
    CW(AUTHOR=\"(c) The.Author 2003\")

MAKEFILE
    CW(PACKAGE := package-name)
    CW(VERSION := 1.13)
    CW(PROJECT := project-name # comment)
    CW(AUTHORS := The.Author 2016)

VERSION FILE
    Language-independent CG(VERSION) file:
    CW(PACKAGE: package-name)
    CW(VERSION: 1.13)
    CW(AUTHORS: Author1, Author2, 2010 # comment)

HEAD-COMMENT
    A note in the head-comment of singlefile (comment in first ten
    lines) found by keywords: Version, Copyleft, Copyright, (c), (C):
    CW(/* Package ABC Version 2.13, Subversion c, (c) A.Qwerty 2011*/)

KEYWORDS
    CD(PACKAGE)
    CD(VERSION)
    CD(SUBVERS SUBVERSION)
    CD(PROJECT)
    CD(AUTHORS AUTHOR COPYLEFT COPYRIGHT)
    CD(CAPTION)
    CD(VARIANT BRANCH)
    CK(SUFFIX) (the rest are config only, CG(VERSION) file or CG(.subrelease))
    CK(TGZDIR)
    CK(ALWAYS)
    CK(ONREL ONRELEASE)
    CK(ONSUB ONSUBRELEASE)

MULTI-LANGUAGE
    For multi-language packages use automatic conversion from the
    master file (Makefile, CD(VERSION) or even CD(VERSION.h)) into language
    specific temporary/hidden includes: CG(.version.pl) or CG(.version.py) ...

SEE ALSO
    CW(subrelease -h)

VERSION
    $PACKAGE-$VERSION$SUBVERSION $CK_$AUTHOR$CD_ $CK_(built $BUILT)$CD_

EOF

$CR_=$CG_=$CC_=$CM_=$CW_=$CK_=$CD_="" if clar \@ARGV,"-bw";
printhelp if clar \@ARGV,"-h";

my $ALL=1;
my $PKG=1 and $ALL=0 if clar \@ARGV,"-pkg";
my $VER=1 and $ALL=0 if clar \@ARGV,"-ver";
my $SUB=1 and $ALL=0 if clar \@ARGV,"-sub";
my $NXT=1 and $ALL=0 if clar \@ARGV,"-next";
my $PRJ=1 and $ALL=0 if clar \@ARGV,"-prj";
my $PNM=1 and $ALL=0 if clar \@ARGV,"-pnm";
my $CPY=1 and $ALL=0 if clar \@ARGV,"-cpy";
my $DEL=1 and $ALL=0 if clar \@ARGV,"-del";
my $SRC=1 and $ALL=0 if clar \@ARGV,"-src";
my $CAP=1 and $ALL=0 if clar \@ARGV,"-cap";
my $LNG=1 and $ALL=0 if clar \@ARGV,"-lng";
our %ARG;
do { $ARG{tgzdir}=$ARGV[$i]; $ARGV[$i]=""; } if $i=clar(\@ARGV,"-t") and $i<=$#ARGV;
for(@ARGV) { print STDERR "${CR_}unknown rgument $_$CD_\n" and exit if $_ ne "" }

our %PKG; # package parameters key-value pairs
our %PKK; # exact original keywords for given key
our %PKM; # verbose message for given key

# GETVERSION PARSERS
# to-regex parser: regexes are hard to read, but simple task-specific language
# can be parsed to regex, and such language can be OK to read...
#
# open tore syntax:
# BGN~#~define KEY "[^"]*"
# BGN~#~define KEY [^\h]*\s
#
# enclosed enre syntax:
# (~#~define KEY ")([^"]*)(".*)

# create regex from array
sub tore { my @A=@_; my $s;
  for(@A) {

    # abc|cde|xyz -> (?:(?:abc)|(?:cde)|(?:xyz))
    while(s/(([a-zA-Z0-9]+\|)+[a-zA-Z0-9]+)/__TORE__/) {
      my $z; $z.="(?:$_)\|" for split /\|/,$1; $z=~s/\|$//;
      s/__TORE__/(?:$z)/ }

    s/~/\\h*/g;			# '~' is optional space
    s/ /\\h+/g;			# ' ' is mandatory space
    s/BGN/(?:^|\\n)/g;		# begin-of-line non-capture group
    s/END/(?:\\n|\$)/g;		# end-of-line
    $s .= $_; }
  return $s; }

# enclosed regex from array: (...) -> ((?:^|\n)...(?:\n|$))
sub enre {
  my $s = tore @_;
  $s =~ s/^\(/((?:^|\\n)/;	# first element starts with (?:^|\n) start of line
  $s =~ s/\)$/(?:\\n|\$))/;	# last element ends with (?:\n|$) end of line
  return $s }

{ # ---------------------------------------------------------------------------- PER-LASGUAGE PARSERS
# key/value parsers: value = xyzvar(body,key) # $_[0]=body $_[1]=key
# return: a value, or (value,used_keyname) pair

our sub cvar { my ($s,$k) = @_;
  my $re1 = tore 'BGN~#~define ',$k,' "([^"\n]*)"';		# quoted
  my $re2 = tore 'BGN~#~define ',$k,' ([^\h]*)\s';		# plain
  return $1 if $s =~ /$re1/;
  return $1 if $s =~ /$re2/;
  return }

our sub perlvar { my ($s,$k) = @_;
  my $re1 = tore 'BGN~(?:our|my\h+)?\$',$k,'~=~"([^"\n]*)"';	# quoted
  my $re2 = tore 'BGN~(?:our|my\h+)?\$',$k,'~=~([^\h;]*)[\s;]';	# plain
  return $1 if $s =~ /$re1/;
  return $1 if $s =~ /$re2/;
  return }

our sub shvar { my ($s,$k) = @_;
  my $re1 = tore 'BGN~',$k,'~=~"([^"\n]*)"';			# quoted
  my $re2 = tore 'BGN~',$k,'~=~([^\h#;]*)[\s#;]';		# plain
  return $1 if $s =~ /$re1/;
  return $1 if $s =~ /$re2/;
  return }

our sub pythonvar { shvar @_ }

our sub makevar { my ($s,$k) = @_;
  my $re1 = tore 'BGN~',$k,'~:?=~"([^"\n]*)"';			# quoted
  my $re2 = tore 'BGN~',$k,'~:?=~([^#]*?)~(?:#.*)?END';		# plain (w comment)
  return $1 if $s =~ /$re1/;
  return $1 if $s =~ /$re2/;
  return }

my  sub cfgre1 { return tore 'BGN~',$_[0],'~: "([^"\n]*)"' }	# quoted
my  sub cfgre2 { return tore 'BGN~',$_[0],'~: ([^#]*?)~(?:#.*)?END' } # plain (w comment)
our sub cfgvar { my ($s,$k) = @_;
  my $re1 = cfgre1 $k; return $1 if $s =~ /$re1/;
  my $re2 = cfgre2 $k; return $1 if $s =~ /$re2/;
  return }

our sub commentvar {
  my ($s,$k) = @_;
  my $k1 = lc $k;
  my $k2 = ucfirst lc $k;
  my $k3 = uc $k;
  if($k eq "PACKAGE" or $k eq "PROJECT" or $k eq "VERSION" or $k eq "SUBVERS" or $k eq "SUBVERSION") {
    return ($5,$1) if $s =~ /(($k1)|($k2)|($k3))\h+([^\h]*?)[\h,;]/ }
  else {
    return ($5,$1) if $s =~ /(($k1)|($k2)|($k3))\h+(.*?)(\n|$)/ }
  return }

# -------------------------------------------------------------------------------------------- GETVAR

# checkvar "PACKAGE","package"; requires $CMD,$BODY,$MSG; fills $PKG,$PKK,$PKM
my sub checkvar {
  my ($NAME,$KEY) = @_;					# variable name and a PKG key
  my ($val,$name) = &{$CMD}($BODY,$NAME);		# $val,$key = perlvar($body,"PACKAGE")
  return if not defined $val or $val eq "";		# no $val or empty $val
  $PKG{$KEY} = $val;					# $PKG{package} = $val
  $PKK{$KEY} = $NAME;					# $PKK{package} = "PACKAGE"
  if(defined $name) { $PKM{$KEY}="$MSG: $name" }	# $PKM{package} = "$msg: Package"
  else		    { $PKM{$KEY}="$MSG: $NAME" }}	# $PKM{package} = "$msg: PACKAGE"

# check all appearances of the array-type variables in config (config-only!)
# requires $CMD,$BODY,$MSG; fills $PKG,$PKK,$PKM
my sub checkcfg {
  my ($NAME,$KEY) = @_;
  my $body = $BODY; # copy!
  my $re1 = cfgre1 $NAME;
  my $re2 = cfgre2 $NAME;
  my @pkg; my @pkk; my @pkm; my $ok;
  while($body=~s/$re1/\n/ or $body=~s/$re2/\n/) {
    push @pkg,$1;
    push @pkk,$NAME;
    push @pkm,"$MSG: $NAME";
    $ok=1 }
  return if not $ok;
  # print ">> $KEY:"; print " [$_]" for @arr; print "\n";
  push @{$PKG{$KEY}},@pkg;
  push @{$PKK{$KEY}},@pkk;
  push @{$PKM{$KEY}},@pkm; }

# load $PKG{file} and read all variables from it
our sub getvar {
  return if not defined $PKG{file};
  $PKG{comment} = 1 if $_[2] eq "comment";
  local  $CMD = $_[0]; # local to be seen in checkvar
  local $BODY = $_[1]; $BODY = `cat $PKG{file}` if not defined $_[1];
  local  $MSG = "<- ".beautify($PKG{file},$PKG{pwd}); $MSG.=" $_[2]" if defined $_[2];
  checkvar "PACKAGE","package";
  checkvar "VERSION","version";
  checkvar "SUBVERS",   "subversion";
  checkvar "SUBVERSION","subversion";
  checkvar "PROJECT","project";
  checkvar "AUTHOR",   "authors";
  checkvar "AUTHORS",  "authors";
  checkvar "COPYRIGHT","authors";
  checkvar "COPYLEFT", "authors";
  checkvar "CAPTION","caption";
  checkvar "BRANCH", "variant";
  checkvar "VARIANT","variant";
  return if not $PKG{config}; # the rest are config specific keywords
  checkvar "SUFFIX","suffix";
  checkvar "TGZDIR","tgzdir";
  checkcfg "ONSUBRELEASE","onsubrelease"; # next are arrays = accept multiple lines
  checkcfg "ONSUB",	  "onsubrelease";
  checkcfg "ONRELEASE","onrelease";
  checkcfg "ONREL",    "onrelease";
  checkcfg "ALWAYS","always" }

} # -------------------------------------------------------------------------------------------------

# R.Jaksa 2001,2009,2023 GPLv3

{ # SUBRELEASE CONFIG

# return 1 if pathname can be used as dir for this user, 0 otherwise
my sub dirok {
  return 1 if not -e $_[0] or (-w $_[0] and -d $_[0]);
  return 0 }

# return the temporary backup directory, try /tmp/sub, /tmp/user-sub, /tmp/sub2...
my sub tmpdir { my $tmp;
  $tmp = "/tmp/subrelease";
  return $tmp if dirok $tmp;
  $tmp = "/tmp/$ENV{USER}-subrelease";
  return $tmp if dirok $tmp;
  my $i=2; do { $tmp = "/tmp/subrelease$i"; $i++ } while(not dirok $tmp);
  return $tmp }

# ---------------------------------------------------------------------------------------------------

my sub pkginit {
  $PKG{pwd} = nonl `pwd`;
  $PKG{tgzdir} = -d "../tgz" ? "../tgz" : "..";
  $PKM{tgzdir} = "<- default";
  $PKG{tmpdir} = tmpdir; 
  $PKG{delimiter} = "-";
  $PKM{delimiter} = "<- default"; }

# for parsing configs, before the real identify
# $PKG{config} is temporal here, but permanent for VERSION file
my sub parsecfg {
  $PKG{config} = 1; # flag that we do parse config file (not the regular source file)
  $PKG{file} = $_[0];
  $PKG{language} = "cfg";
  getvar \&cfgvar;
  delete $PKG{config}; # reset the setup after the .subrelease config
  delete $PKG{file};
  delete $PKG{language} }

# main
our sub subrelease_config {
  pkginit;

  # find config files
  my $config1 = homecfg ".subrelease";		   # 1st read these
  my $config2 = parentcfg $PKG{pwd},".subrelease"; # 2nd override by these

  # parse configs, override 1 with 2
  parsecfg $config1 and $PKG{config1}=$config1 if defined $config1;
  parsecfg $config2 and $PKG{config2}=$config2 if defined $config2;

  # # parse the config
  # if($cf) {
  #   $PKG{suffix}  = getval $cfbody,"suffix";
  #   $PKG{variant} = getval $cfbody,"variant";
  #   $PKM{suffix}  = "<- $cf" if $PKG{suffix};
  #   $PKM{variant} = "<- $cf" if $PKG{variant} }
  #
  # if($cf and not $PKG{variant}) {
  #   $PKG{variant} = getval $cfbody,"branch";
  #   $PKK{variant} = "branch" if $PKG{variant};
  #   $PKM{variant} = "<- $cf: branch" if $PKG{variant} }

  # beautify the variant
  my $variant = $PKG{variant};
  $PKG{variant} =~ s/\h/-/g; # disable unsafe whitespaces

  # beautify the suffix
  my $suffix = $PKG{suffix};
  $PKG{suffix} =~ s/x/t/g;
  $PKG{suffix} =~ s/^\.?sub//;
  $PKG{suffix} =~ s/^\.?tar//;
  $PKG{suffix} =~ s/^\.+//; 

  # fix PKM
  $PKM{variant} = "<= $variant $PKM{variant}" if $variant ne $PKG{variant};
  $PKM{suffix}  = "<= $suffix $PKM{suffix}"   if $suffix  ne $PKG{suffix};

  # no empty suffix/variant allowed
  delete $PKG{suffix} if not $PKG{suffix};
  delete $PKG{variant} if not $PKG{variant}; }

# MAIN
} subrelease_config;

# R.Jaksa 2023 GPLv3
$PKG{$_}=$ARG{$_} and $PKM{$_}="<- CLI arg" for keys %ARG;
{ # SUBRELEASE NAMES/FILENAMES UTILITIES, required %PKG access

# parse the string to package, delimiter, version
sub name2pkg {
  my $name = $_[0];
  my $sx = "(([a-z])|(rc[0-9]))?";
  my @pdv;
  if($name =~ /([a-zA-Z][a-zA-Z0-9._+-]*?)?([\._-]?)([0-9\.]+$sx)$/) { @pdv = ($1,$2,$3) }
  elsif($name =~ /^[^a-zA-Z0-9]*(.*)$/) { @pdv = ($1) }
  ($PKG{package},$PKG{delimiter},$PKG{version}) = @pdv;
  $PKM{package} = $PKM{delimiter} = $PKM{version} = "<= $name" }

# parse the version into major, dot, minor, mtype
sub update_majorminor {
  return if not $PKG{version};
  my @mdm;
  if   ($PKG{version} =~ /(.*?)([.]?)([0-9]+)$/) { @mdm = ($1,$2,$3,"09") }
  elsif($PKG{version} =~ /(.*?)([.-]?)([a-z])$/) { @mdm = ($1,$2,$3,"az") }
  ($PKG{major},$PKG{dot},$PKG{minor},$PKG{mtype}) = @mdm;
  $PKM{major} = $PKM{dot} = $PKM{minor} = $PKM{mtype} = "<= $PKG{version}" }

# update pkgname: package+version
sub update_pkgname {
  $PKG{pkgname} = $PKG{package}.$PKG{delimiter}.$PKG{version};
  $PKM{pkgname} = "<= $PKG{package} $PKG{delimiter} $PKG{version}" }

# update fullname: pkgname+subversion+variant
sub update_fullname {
  my $var=""; $var=".$PKG{variant}" if defined $PKG{variant};
  $PKG{fullname} = $PKG{pkgname}.$PKG{next}.$var;
  $PKM{fullname} = "<= $PKG{pkgname} $PKG{next} $PKG{variant}" }

# ------------------------------------------------------------------------------------------ SUFFIXES

# release suffix
our sub relsx {
  my $sx = $PKG{suffix};					# gz
     $sx = "tar.$sx" if $PKG{suffix}=~/^[gblz]/;		# tar.gz
     $sx = "$PKG{variant}.$sx" if defined $PKG{variant};	# variant.tar.gz
  return ".$sx" }

# subreleases archive suffix
our sub subsx {
  my $sx = $PKG{suffix};					# gz
  if($PKG{suffix}=~/^[gblz]/) { $sx = "sub.tar.$sx" }		# sub.tar.gz
  else			      { $sx =~ s/^t/x/ }		# tgz -> xgz
  return ".$sx" }

# ------------------------------------------------------------------------------ EXISTING FILES NAMES
# return previous existing release/archive paths, relative to TGZDIR, from package and version

# release and archive suffixes
my @RSX = ("tlz","tar.lz","tzst","tar.zst","tbz2","tar.bz2","tgz","tar.gz");
my @ASX = ("xlz","sub.tar.lz","xzst","sub.tar.zst","xbz2","sub.tar.bz2","xgz","sub.tar.gz");
my @ADE = ("arch.tar.bz2","arch.bkp.tar.bz2"); # DEPRECATED
my @RBP = @RSX; s/$/.bkp/ for @RBP;
my @ABP = @ASX; s/$/.bkp/ for @ABP;

# our $release = get_release; return active release file path
# only checks variant release if variant specified
our sub get_release {
  my @vars = ("");
     @vars = (".$PKG{variant}") if defined $PKG{variant}; # (".$PKG{variant}","") to check all
  for my $var (@vars) {		# variant
    for my $sx (@RSX,@RBP) {	# suffixes
      for my $del ("-",".") {	# delimiters
	my $f = "$PKG{package}$del$PKG{version}$var.$sx"; my $fn=$f;
	   $f = "$PKG{tgzdir}/$f" if defined $PKG{tgzdir};
	# print $f; print " *" if -f $f; print "\n";
	return $fn if -f $f }}}}

# our $archive = get_archive; return active archive path
our sub get_archive {
  for my $sx (@ASX,@ABP,@ADE) {
    for my $del ("-",".") {
      my $f = "$PKG{package}$del$PKG{version}.$sx"; my $fn=$f;
         $f = "$PKG{tgzdir}/$f" if defined $PKG{tgzdir};
      # print $f; print " *" if -f $f; print "\n";
      return $fn if -f $f }}}

# ----------------------------------------------------------------------------------------- TAR FILES

# return ziptype for tar
my sub ziptype {
  if   ($PKG{suffix} =~ /zst$/) { return "--zstd" }
  elsif($PKG{suffix} =~ /bz2$/) { return "--bzip2" }
  elsif($PKG{suffix} =~ /gz$/)  { return "--gzip" }
  return "--lzip" }

# tar from given dir: tarfrom(inputdir,inputfileordir,outputtar)
our sub tarfrom { my ($dir,$file,$tar,$cc) = @_; my $zip = ziptype;
  cmd "tar cf $tar $zip -C $dir $file",$cc; }

# directory tar: tardir(inputdir,outputtar)
our sub tardir { my ($dir,$tar) = @_; my $zip = ziptype;
  cmd "tar cf $tar $zip $dir"; }

} # R.Jaksa 2001,2021,2023 GPLv3

{ # GETVERSION IDENTIFY

# get PKG file (and singlefile) and language from current dir, no PKM PKK
my sub getfile {

  # 1st: try explicit VERSION files
  if   (-f "VERSION.pl"){ $PKG{language} = "perl";   $PKG{file} = "VERSION.pl"; }
  elsif(-f  "CONFIG.pl"){ $PKG{language} = "perl";   $PKG{file} = "CONFIG.pl"; }
  elsif(-f "VERSION.py"){ $PKG{language} = "python"; $PKG{file} = "VERSION.py"; }
  elsif(-f  "CONFIG.py"){ $PKG{language} = "python"; $PKG{file} = "CONFIG.py"; }
  elsif(-f "VERSION.h")	{ $PKG{language} = "c";      $PKG{file} = "VERSION.h"; }
  elsif(-f  "CONFIG.h")	{ $PKG{language} = "c";      $PKG{file} = "CONFIG.h"; }
  elsif(-f "VERSION")	{ $PKG{language} = "cfg";    $PKG{file} = "VERSION"; $PKG{config} = 1; }
  elsif(-f "Makefile")	{ $PKG{language} = "make";   $PKG{file} = "Makefile"; }

  # get list of all files to look further
  my @FILES = split /\n/,`find . -maxdepth 1 -type f`;
  s/^.\/// for @FILES;

  # 2nd: singlefile if there is only a single file present
  if(not defined $PKG{file} and $#FILES==0) { 
    $PKG{file} = $PKG{singlefile} = $FILES[0];
    my $line1 = `head -n 1 '$FILES[0]'`;
    $PKG{language} = "perl"   if $line1 =~ /^\#!\h*\/.*\/perl/;
    $PKG{language} = "python" if $line1 =~ /^\#!\h*\/.*\/python/;
    $PKG{language} = "sh"     if $line1 =~ /^\#!\h*\/.*\/((ba)|(z))?sh/;
    $PKG{language} = "c"      if $FILES[0] =~ /\.[ch]$/;
    $PKG{language} = "perl"   if $FILES[0] =~ /\.pl$/;
    $PKG{language} = "python" if $FILES[0] =~ /\.py$/;
    $PKG{language} = "sh"     if $FILES[0] =~ /\.sh$/; }

  # look for the 1st perl file with the "$PACKAGE="
  if(not defined $PKG{file}) {
    for my $f (@FILES) {
      my $line1 = `head -n 1 '$f'`;
      my $pl = 0;
         $pl = 1 if $f =~ /\.pl$/;
         $pl = 1 if $line1 =~ /^\#!\h*\/.*\/perl/;
      next if not $pl;
      next if not `cat '$f'` =~ /\$PACKAGE\h*=/;
      $PKG{file} = $f;
      $PKG{language} = "perl";
      last; }}}

# get all variables from given PKG{file}, needs file and language
my sub getvars {

  getvar \&perlvar   if $PKG{language} eq "perl";
  getvar \&pythonvar if $PKG{language} eq "python";
  getvar \&shvar     if $PKG{language} eq "sh";
  getvar \&cvar	     if $PKG{language} eq "c";
  getvar \&cfgvar    if $PKG{language} eq "cfg";
  getvar \&makevar   if $PKG{language} eq "make";

  # from header-comment
  if((not defined $PKG{package} or
      not defined $PKG{version} or
      not defined $PKG{authors}) and defined $PKG{file}) {
    my $s = `head $PKG{file}`;
    my $body;

    if($PKG{language} eq "c") {
      while($s=~s/\/\*(.*?)\*\///)   { $body.="$1\n" }	# we don't avoid in-strings "/*...*/" match
      while($s=~s/\/\/(.*?)(\n|$)//) { $body.="$1\n" }}	# detto
    else {
      while($s=~s/#(.*?)(\n|$)//)    { $body.="$1\n" }}	# detto

    getvar \&commentvar,$body,"comment";

    # (c) Author hack
    if(not defined $PKG{authors}) {
      $PKG{authors} = $2 if $body=~/(\([Cc]\))\h+(.*?)\h*\n/;
      $PKM{authors} = "<- $PKG{file} comment: $1" }}

  # singlefile PKG from filename
  if(not defined $PKG{package} and defined $PKG{singlefile}) {
    $PKG{package} = $PKG{file};
    $PKG{package} =~ s/\..*$//;
    $PKM{package} = "<= $PKG{file} filename"; }}

# identify project from pwd or package
my sub getproject {

  # derived from parent directory
  if(not defined $PKG{project}) {
    if($PKG{pwd} =~ /\/([^\/]+)\/[^\/]+$/) {
      $PKG{project} = "$1";
      $PKM{project} = "derived from CWD: $PKG{pwd}"; }}

  # copy the package name
  if(not defined $PKG{project} and defined $PKG{package}) {
    $PKG{project} = "$PKG{package}";
    $PKM{project} = "derived from $PKG{package}"; }}

# main
our sub getversion_identify {
  getfile;
  getvars;
  getproject;
  update_pkgname }

# MAIN
} getversion_identify;

# R.Jaksa 2001,2021,2023 GPLv3
# this works directly on global %PKG

# get_next_sub $release,$archive; inspects release/archive files (relative to tgzdir)
# to get next subversion, by looking into archive or by incrementing saved subversion value
sub get_next_sub {
  my $release = "$PKG{tgzdir}/$_[0]";
  my $archive = "$PKG{tgzdir}/$_[1]";

  # default first member of archive
  my $next = "a";
     $next = "0" if $PKG{mtype} eq "az"; 

  # reset subversion
  if($PKG{subversion} =~ /^reset (.*)$/) {
    $PKG{subversion} = $1;
    $PKG{next} = "";
    $PKM{next} = "<= $1 reset";
    return }

  # archive does not exist, but we have saved subversion number
  if(not -f $archive and defined $PKG{subversion} and $PKG{subversion}) {
    my $next = $PKG{subversion};
    $PKG{next} = $next;
    $PKG{next} ++;
    $PKM{next} = "<= $next $PKM{subversion}";
    return }

  # archive does not exist, but release package does, start subreleases with "a" or "0"
  if(not -f $archive and -f $release) {
    $PKG{next} = $next;
    $PKM{next} = "<= $release";
    return }

  # nor archive nor release package exist, none next
  if(not -f $archive) { return }

  # archive exists, get list of subversions from the list of files in archive
  my @a;
  for(sort split /\n/,`tar tf $archive`) { push @a,$1 if /^[^\/]+\/([^\/]+)\/?$/ }
  # print "subs: @a\n";

  # find the biggest subbversion in the list
  $next = $1 if @a and @a[$#a]=~/$PKG{delimiter}$PKG{version}(.*?)(\.|$)/;
  # print " max: $next\n";

  # init/change $next to $PKG{subversion} if defined and bigger then in archive
  $next = $PKG{subversion} if defined $PKG{subversion} and $PKG{subversion} and $PKG{subversion} gt $next;

  # find the first free subversion (but bigger then the current $next)
  my sub inarch { my $v=quotemeta $_[1]; for(@{$_[0]}) { return 1 if /$v/ }}
  $next++ while inarch \@a,"$PKG{delimiter}$PKG{version}$next";

  $PKG{next} = $next;
  $PKM{next} = "<- $archive"; }

# R.Jaksa 2001,2023 GPLv3

# get next subversion from the archive file
our $release = get_release;
our $archive = get_archive;
get_next_sub $release,$archive;
update_majorminor;

# print the %PKG value (if exists)
sub prval { return if not defined $PKG{$_[0]} or print "$PKG{$_[0]}\n" }

prval "package"	   if $PKG;
prval "version"	   if $VER;
prval "subversion" if $SUB;
prval "next"	   if $NXT;
prval "project"	   if $PRJ;
prval "pkgname"	   if $PNM;
prval "authors"	   if $CPY;
prval "delimiter"  if $DEL;
prval "source"	   if $SRC;
prval "caption"	   if $CAP;
prval "language"   if $LNG;
exit 0 if not $ALL;

# print single %PKG key/value line for given key
sub prln { my $k=$_[0];
  return if not defined $PKG{$k};
  my $msg = " $CK_$PKM{$k}$CD_" if defined $PKM{$k};
  my $key = defined $_[1] ? $_[1] : $k;
  printf "%10s: $CC_%s$CD_$msg\n",$key,$PKG{$k}; }

# prln but with PKK as a key
sub prlo { prln $_[0],(defined $PKK{$_[0]} ? lc $PKK{$_[0]} : $_[0]) }

prln "singlefile";
prln "package";
prln "version";
print "     major: $CC_$PKG{major}$CK_$PKG{dot}$PKG{minor}$CD_\n";
prln "subversion";
prln "next";
prln "pkgname";
prlo "authors";
prln "caption";
prln "variant";
prln "suffix";
prln "project";
# TODO: tgzdir...

# R.Jaksa 2001,2021,2023 GPLv3
